apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: clusterenvironments.primaza.io
spec:
  group: primaza.io
  names:
    kind: ClusterEnvironment
    listKind: ClusterEnvironmentList
    plural: clusterenvironments
    singular: clusterenvironment
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ClusterEnvironment is the Schema for the clusterenvironments
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterEnvironmentSpec defines the desired state of ClusterEnvironment
            properties:
              applicationNamespaces:
                description: Namespaces in target cluster where applications are deployed
                items:
                  type: string
                type: array
              clusterContextSecret:
                description: Name of the Secret where connection (kubeconfig) information
                  to target cluster is stored
                type: string
              contactInfo:
                description: Cluster Admin's contact information
                type: string
              description:
                description: Description of the ClusterEnvironment
                type: string
              environmentName:
                description: The environment associated to the ClusterEnvironment
                  instance
                type: string
              labels:
                description: Labels
                items:
                  type: string
                type: array
              serviceNamespaces:
                description: Namespaces in target cluster where services are discovered
                items:
                  type: string
                type: array
            required:
            - clusterContextSecret
            - environmentName
            type: object
          status:
            description: ClusterEnvironmentStatus defines the observed state of ClusterEnvironment
            properties:
              conditions:
                description: Status Conditions
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              state:
                default: Offline
                description: The State of the cluster environment
                enum:
                - Online
                - Offline
                - Partial
                type: string
            required:
            - conditions
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: registeredservices.primaza.io
spec:
  group: primaza.io
  names:
    kind: RegisteredService
    listKind: RegisteredServiceList
    plural: registeredservices
    singular: registeredservice
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: RegisteredService is the Schema for the registeredservices API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: RegisteredServiceSpec defines the desired state of RegisteredService
            properties:
              constraints:
                description: Constraints defines under which circumstances the RegisteredService
                  may be used.
                properties:
                  environments:
                    description: Environments defines in which environments the RegisteredService
                      may be used.
                    items:
                      type: string
                    type: array
                type: object
              healthcheck:
                description: HealthCheck defines a health check for the underlying
                  service.
                properties:
                  container:
                    description: Container defines a container that will run a check
                      against the ServiceEndpointDefinition to determine connectivity
                      and access.
                    properties:
                      command:
                        description: Command to execute in the container to run the
                          test
                        type: string
                      image:
                        description: Container image with the client to run the test
                        type: string
                    required:
                    - command
                    - image
                    type: object
                required:
                - container
                type: object
              serviceClassIdentity:
                description: ServiceClassIdentity defines a set of attributes that
                  are sufficient to identify a service class.  A ServiceClaim whose
                  ServiceClassIdentity field is a subset of a RegisteredService's
                  keys can claim that service.
                items:
                  description: ServiceClassIdentityItem defines an attribute that
                    is necessary to identify a service class.
                  properties:
                    name:
                      description: Name of the service class identity attribute.
                      type: string
                    value:
                      description: Value of the service class identity attribute.
                      type: string
                  required:
                  - name
                  - value
                  type: object
                type: array
              serviceEndpointDefinition:
                description: ServiceEndpointDefinition defines a set of attributes
                  sufficient for a client to establish a connection to the service.
                items:
                  description: ServiceEndpointDefinitionItem defines an attribute
                    that is necessary for a client to connect to a service
                  properties:
                    name:
                      description: Name of the service endpoint definition attribute.
                      type: string
                    value:
                      description: Value of the service endpoint definition attribute.
                        It is mutually exclusive with ValueFromSecret.
                      type: string
                    valueFromSecret:
                      description: Value reference of the service endpoint definition
                        attribute. It is mutually exclusive with Value
                      properties:
                        key:
                          description: Key of the secret reference field
                          type: string
                        name:
                          description: Name of the secret reference
                          type: string
                      required:
                      - key
                      - name
                      type: object
                  required:
                  - name
                  type: object
                type: array
              sla:
                description: SLA defines the support level for this service.
                type: string
            required:
            - serviceClassIdentity
            - serviceEndpointDefinition
            type: object
          status:
            description: RegisteredServiceStatus defines the observed state of RegisteredService.
            properties:
              state:
                description: State describes the current state of the service.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: servicebindings.primaza.io
spec:
  group: primaza.io
  names:
    kind: ServiceBinding
    listKind: ServiceBindingList
    plural: servicebindings
    singular: servicebinding
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ServiceBinding is the Schema for the servicebindings API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceBindingSpec defines the desired state of ServiceBinding
            properties:
              application:
                description: 'Application resource to inject the binding info. It
                  could be any process running within a container. From the spec:
                  A Service Binding resource **MUST** define a `.spec.application`
                  which is an `ObjectReference`-like declaration to a `PodSpec`-able
                  resource.  A `ServiceBinding` **MAY** define the application reference
                  by-name or by-[label selector][ls]. A name and selector **MUST NOT**
                  be defined in the same reference.'
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  selector:
                    description: Selector is a query that selects the workload or
                      workloads to bind the service to
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                    x-kubernetes-map-type: atomic
                required:
                - apiVersion
                - kind
                type: object
              env:
                description: Env creates environment variables based on the Secret
                  values
                items:
                  description: Environment represents a key to Secret data keys and
                    name of the environment variable
                  properties:
                    key:
                      description: Secret data key
                      type: string
                    name:
                      description: Name of the environment variable
                      type: string
                  required:
                  - key
                  - name
                  type: object
                type: array
              serviceEndpointDefinitionSecret:
                description: ServiceEndpointDefinitionSecret is the name of the secret
                  to project into the application
                type: string
            required:
            - application
            - serviceEndpointDefinitionSecret
            type: object
          status:
            description: Observed status of the service binding within the namespace
            properties:
              conditions:
                description: The status of the service binding along with reason and
                  type
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              state:
                default: Malformed
                description: The state of the service binding observed
                enum:
                - Ready
                - Malformed
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: servicecatalogs.primaza.io
spec:
  group: primaza.io
  names:
    kind: ServiceCatalog
    listKind: ServiceCatalogList
    plural: servicecatalogs
    singular: servicecatalog
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ServiceCatalog is the Schema for the servicecatalogs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceCatalogSpec defines the desired state of ServiceCatalog
            properties:
              services:
                description: Services contains a list of services that are known to
                  Primaza.
                items:
                  properties:
                    name:
                      description: Name defines the name of the known service
                      type: string
                    serviceClassIdentity:
                      description: ServiceClassIdentity defines a set of attributes
                        that are sufficient to identify a service class.  A ServiceClaim
                        whose ServiceClassIdentity field is a subset of a RegisteredService's
                        keys can claim that service.
                      items:
                        description: ServiceClassIdentityItem defines an attribute
                          that is necessary to identify a service class.
                        properties:
                          name:
                            description: Name of the service class identity attribute.
                            type: string
                          value:
                            description: Value of the service class identity attribute.
                            type: string
                        required:
                        - name
                        - value
                        type: object
                      type: array
                    serviceEndpointDefinitionKeys:
                      description: ServiceEndpointDefinitionKeys defines a set of
                        keys listing the information this service provides to a workload.
                      items:
                        type: string
                      type: array
                  required:
                  - name
                  - serviceClassIdentity
                  - serviceEndpointDefinitionKeys
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: serviceclaims.primaza.io
spec:
  group: primaza.io
  names:
    kind: ServiceClaim
    listKind: ServiceClaimList
    plural: serviceclaims
    singular: serviceclaim
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ServiceClaim is the Schema for the serviceclaims API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceClaimSpec defines the desired state of ServiceClaim
            properties:
              application:
                description: Application resource to inject the binding info. It could
                  be any process running within a container.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  selector:
                    description: Selector is a query that selects the workload or
                      workloads to bind the service to
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                    type: object
                    x-kubernetes-map-type: atomic
                required:
                - apiVersion
                - kind
                type: object
              applicationClusterContext:
                properties:
                  clusterEnvironmentName:
                    type: string
                  namespace:
                    type: string
                required:
                - clusterEnvironmentName
                - namespace
                type: object
              environmentTag:
                description: EnvironmentTag allows the controller to search for those
                  application cluster environments that define such EnvironmentTag
                type: string
              serviceClassIdentity:
                description: ServiceClassIdentity defines a set of attributes that
                  are sufficient to identify a service class.  A ServiceClaim whose
                  ServiceClassIdentity field is a subset of a RegisteredService's
                  keys can claim that service.
                items:
                  description: ServiceClassIdentityItem defines an attribute that
                    is necessary to identify a service class.
                  properties:
                    name:
                      description: Name of the service class identity attribute.
                      type: string
                    value:
                      description: Value of the service class identity attribute.
                      type: string
                  required:
                  - name
                  - value
                  type: object
                type: array
              serviceEndpointDefinitionKeys:
                description: ServiceEndpointDefinition defines a set of attributes
                  sufficient for a client to establish a connection to the service.
                items:
                  type: string
                type: array
            required:
            - serviceClassIdentity
            - serviceEndpointDefinitionKeys
            type: object
          status:
            description: ServiceClaimStatus defines the observed state of ServiceClaim
            properties:
              claimID:
                type: string
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              registeredService:
                type: string
              state:
                default: Pending
                enum:
                - Pending
                - Resolved
                type: string
            required:
            - registeredService
            - state
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: serviceclasses.primaza.io
spec:
  group: primaza.io
  names:
    kind: ServiceClass
    listKind: ServiceClassList
    plural: serviceclasses
    singular: serviceclass
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ServiceClass is the Schema for the serviceclasses API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServiceClassSpec defines the desired state of ServiceClass
            properties:
              constraints:
                description: Constraints defines under which circumstances the ServiceClass
                  may be used.
                properties:
                  environments:
                    description: Environments defines the environments that the RegisteredService
                      may be used in.
                    items:
                      type: string
                    type: array
                type: object
              resource:
                description: Resource defines the resource type to be used to convert
                  into Registered Services
                properties:
                  apiVersion:
                    description: APIVersion of the underlying service resource
                    type: string
                  kind:
                    description: Kind of the underlying service resource
                    type: string
                  serviceEndpointDefinitionMapping:
                    description: ServiceEndpointDefinitionMapping defines how a key-value
                      mapping projected into services may be constructed.
                    items:
                      properties:
                        jsonPath:
                          description: JsonPath defines where data lives in the service
                            resource.  This query must resolve to a single value (e.g.
                            not an array of values).
                          type: string
                        name:
                          description: Name of the data referred to
                          type: string
                      required:
                      - jsonPath
                      - name
                      type: object
                    type: array
                required:
                - apiVersion
                - kind
                - serviceEndpointDefinitionMapping
                type: object
              serviceClassIdentity:
                description: ServiceClassIdentity defines a set of attributes that
                  are sufficient to identify a service class.  A ServiceClaim whose
                  ServiceClassIdentity field is a subset of a RegisteredService's
                  keys can claim that service.
                items:
                  description: ServiceClassIdentityItem defines an attribute that
                    is necessary to identify a service class.
                  properties:
                    name:
                      description: Name of the service class identity attribute.
                      type: string
                    value:
                      description: Value of the service class identity attribute.
                      type: string
                  required:
                  - name
                  - value
                  type: object
                type: array
            required:
            - resource
            - serviceClassIdentity
            type: object
          status:
            description: ServiceClassStatus defines the observed state of ServiceClass
            properties:
              conditions:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
